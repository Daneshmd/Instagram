# -*- coding: utf-8 -*-
"""Untitled51.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12w5OfRSZPJ2wPHSjcIMDTksos1_gIAMs
"""

import os
import json
from pathlib import Path
from datetime import datetime
from typing import Dict,List,Optional,Tuple
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text
from rich.prompt import Prompt, Confirm

console= Console()

users: Dict[str, Dict]={}
posts: List[Dict]= []
stories: List[Dict]=[]
comments: List[Dict]= []
messages: List[Dict]= []
follow_requests: List[Dict]= []

DATA_DIR= "data"
USERS_FILE=os.path.join(DATA_DIR, "users.json")
EMAILS_FILE=os.path.join(DATA_DTR,"emails.json")
POSTS_FILE=os.path.join(DATA_DIR, "posts.json")
STORIES_FILE=os.path.join(DATA_DIR, "stories.json")
COMMENTS_FILE=os.path.join(DATA_DIR, "comments.json")
MESSAGES_FILE=os.path.join(DATA_DIR, "messages.json")
FOLLOW_REQUESTS_FILE= os.path.join(DATA_DIR, "follow_requests.json")


def save_data():
    #Save users data
    users_data = {}
    for username, user in users.items():
        users_data[username] = {
            "email": user.email,
            "password": user.password,
            "bio": user.bio,
            "followers": user.followers,
            "following": user.following,
            "posts": user.posts,
            "saved_posts": user.saved_posts
        }

    with open('data/users.json', 'w') as f:
        json.dump(users_data, f, indent=2)

    #Save posts data
    posts_data = []
    for post in posts:
        posts_data.append({
            "id": post.id,
            "author": post.author,
            "caption": post.caption,
            "likes": post.likes,
            "comments": post.comments
        })

    with open('data/posts.json', 'w') as f:
        json.dump(posts_data, f, indent=2)

    print("Data saved successfully!")

#the main classes of our code
#each of users has these
class User:
    def __init__(self, username:str, email: str, password:str):
        self.username= username
        self.email= email
        self.password= password
        self.bio= ""
        self.followers=[]
        self.following=[]
        self.posts=[]
        self.saved_posts=[]
        self.blocked_users=[]
        self.is_private = False  #by default baraye hame hesab ha ke public hastan
        self.created_at= datetime.now().isoformat()

    def to_dict(self) -> Dict:
        return {

            "username": self.username,
            "email": self.email,
            "password": self.password,
            "bio": self.bio,
            "followers": self.followers,
            "following":self.following,
            "posts": self.posts,
            "saved_posts":self.saved_posts,
            "blocked_users": self.blocked_users,

        }
    @classmethod
    def from_dict(cls, data: Dict) -> 'Post':
        post = cls(data["author"], data["caption"], data.get("image_path", ""))
        post.id = data["id"]
        post.likes= data.get("likes", [])
        post.comments= data.get("comments", [])
        post.created_at= data.get("created_at", datetime.now())
        return post

def initialize_data_directory():
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)


def load_data():
    global users, posts

    try:
        #Load users
            if os.path.exists(USERS_FILE):
               with open(USERS_FILE, 'r') as f:
                  users_data = json.load(f)
                  for username, data in users_data.items():
                      user = User(username, data['email'], data['password'])
                      user.bio = data.get('bio', '')
                      user.followers = data.get('followers', [])
                      user.following = data.get('following', [])
                      user.posts = data.get('posts', [])
                      user.saved_posts = data.get('saved_posts', [])
                      user.blocked_users = data.get('blocked_users', [])
                      user.is_private = data.get('is_private', False)
                      user.created_at = data.get('created_at', datetime.now().isoformat())
                      users[username] = user


        #Load posts
        if os.path.exists(POSTS_FILE):
            with open(POSTS_FILE, 'r') as f:
                posts_data = json.load(f)
                for post_data in posts_data:
                    post = Post(post_data['author'], post_data['caption'])
                    post.id = post_data['id']
                    post.likes = post_data.get('likes', [])
                    post.comments = post_data.get('comments', [])
                    post.created_at = post_data.get('created_at', datetime.now().isoformat())
                    posts.append(post)

    except Exception as e:
        console.print(f"[red]Error loading data: {e}[/]")



def register_user():
    """Register a new user account"""
    console.print(Panel("register new account", style="blue"))

    while True:
        #valid email
        email= Prompt.ask("Email (or type return to cancel)")
        if email.lower() == 'back':
            return None
        if "@"not in email or "." not in email:
            console.print("[red]Invalid email format!")
            continue
        break

        #valid username
    while True:
        username = Prompt.ask("Username (or type back to cancel)")
        if username.lower()== 'back':
            return None
        if username in users:
            console.print("[red]Username already exists! Please choose another[/]")
            continue
        if " " in username:
            console.print("[red]Username cannot contain spaces![/]")
            continue
        if len(username) < 3:
            console.print("[red]Username must have at least 3 characters![/]")
            continue

        #valid password
        password =input("Password (or type back to cancel):")
        if password.lower() == 'back' :
            return None
        if len(password) <6:
            console.print("[red]Password must have at least 6 characters![/]")
            continue

    #password confirmation
        confirm_password = input("Confirm Password: ")
        if password != confirm_password:
            console.print("[red]Passwords don't match! please try again.[/]")
            continue
        break

    users[username] = User(username, email, password)
    save_data()
    console.print (f"[green]{username} account has been created successfully![/]")
    return username

def home_screen(current_user: str):
    while True:
        console.print(Panel(f" HOME  Welcome Dear {current_user} !", style= "blue"))
        user = users[current_user]
        following_posts = [post for post in posts if post.author in user.following]

        if not following_posts:
            console.print("You can't see the posts")
        else:
            for post in following_posts:
                display_post(post, current_user)
        options= [
            ("1", "search for users"),
            ("2", "my profile"),
            ("3", "create new post"),
            ("4", "exit"),
        ]

        table = Table(show_header=False)
        table.add_column("choice", style="cyan")
        table.add_column("operations")

        for opt, desc in options:
            table.add_row(opt, desc)

        console.print(table)

        choice = Prompt.ask("choose an option", choices=["1", "2", "3", "4"])

        if choice == "1":
            search_users(current_user)
        elif choice == "2":
            profile_screen(current_user)
        elif choice == "3":
            create_post(current_user)
        elif choice == "4":
            return
            
def search_users(current_user: str):
      console.print(Panel("Search users", style="DarkOliveGreen4"))
      search= Prompt.ask("Enter the username that you wan't")
      found_users = [user for user in users if search.lower() in user.lower()]
        if not found_users:
           console.print("[red]Username doesn't be found. Please search another username.[/]")
        elif user in blocked_users:
            console.print("[bisque]Username is in blocked list.[/]")
        else:
           console.print("[chartreuse]User is found:[/]")
           for user in found_users:
               console.print(f"- {user}")

   username = Prompt.ask("Username (or type back to cancel)")
        if username.lower()== 'back':
            return None
        if username in users:
            console.print("[red]Username already exists! Please choose another[/]")


#start the program
def main():
    initialize_data_directory()
    load_data()
    console.print(Panel("instagram", style= "bold blue"))
    while True:
        options = [
            ("1", "Login"),
            ("2","register"),
            ("3", "Exit"),
        ]
        table= Table(show_header= False)
        table.add_column("choise", style="cyan")
        table.add_column("operations")

        for opt, desc in options:
            table.add_row(opt, desc)

        console.print(table)

        choice = Prompt.ask("choose an option", choices=["1", "2", "3"])

        if choice == "1":
            username = login_user()
            if username:
                home_screen(username)
        elif choice== "2":
            username = register_user()
            if username:
                home_screen(username)
        elif choice == "3":
            console.print("[green]Goodbye![/]")
            break

if __name__ == "__main__":
    main()
